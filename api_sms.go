/*
YCloud API

The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.

API version: v2
Contact: service@ycloud.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ycloud

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"time"
)


// SmsApiService SmsApi service
type SmsApiService service

type SmsApiListRequest struct {
	ctx context.Context
	ApiService *SmsApiService
	page *int32
	limit *int32
	includeTotal *bool
	filterCreateTimeGte *time.Time
	filterCreateTimeLte *time.Time
	filterId *string
}

// Page number of the results to be returned, 1-based.
func (r SmsApiListRequest) Page(page int32) SmsApiListRequest {
	r.page = &page
	return r
}

// A limit on the number of results to be returned, or number of results per page, between 1 and 100, defaults to 10.
func (r SmsApiListRequest) Limit(limit int32) SmsApiListRequest {
	r.limit = &limit
	return r
}

// Return results inside an object that contains the total result count or not.
func (r SmsApiListRequest) IncludeTotal(includeTotal bool) SmsApiListRequest {
	r.includeTotal = &includeTotal
	return r
}

// Return results where the &#x60;createTime&#x60; field is greater than or equal to this value. Default: One day ago from now.
func (r SmsApiListRequest) FilterCreateTimeGte(filterCreateTimeGte time.Time) SmsApiListRequest {
	r.filterCreateTimeGte = &filterCreateTimeGte
	return r
}

// Return results where the &#x60;createTime&#x60; field is less than or equal to this value.
func (r SmsApiListRequest) FilterCreateTimeLte(filterCreateTimeLte time.Time) SmsApiListRequest {
	r.filterCreateTimeLte = &filterCreateTimeLte
	return r
}

// Unique object ID on our side. Other filter parameters will be ignored if this parameter is present.
func (r SmsApiListRequest) FilterId(filterId string) SmsApiListRequest {
	r.filterId = &filterId
	return r
}

func (r SmsApiListRequest) Execute() (*SmsPage, *http.Response, error) {
	return r.ApiService.ListExecute(r)
}

/*
List List SMS records

Returns a paginated list of SMS messages you've previously sent.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SmsApiListRequest
*/
func (a *SmsApiService) List(ctx context.Context) SmsApiListRequest {
	return SmsApiListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SmsPage
func (a *SmsApiService) ListExecute(r SmsApiListRequest) (*SmsPage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SmsPage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SmsApiService.List")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sms"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.includeTotal != nil {
		localVarQueryParams.Add("includeTotal", parameterToString(*r.includeTotal, ""))
	}
	if r.filterCreateTimeGte != nil {
		localVarQueryParams.Add("filter.createTime.gte", parameterToString(*r.filterCreateTimeGte, ""))
	}
	if r.filterCreateTimeLte != nil {
		localVarQueryParams.Add("filter.createTime.lte", parameterToString(*r.filterCreateTimeLte, ""))
	}
	if r.filterId != nil {
		localVarQueryParams.Add("filter.id", parameterToString(*r.filterId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SmsApiSendRequest struct {
	ctx context.Context
	ApiService *SmsApiService
	smsSendRequest *SmsSendRequest
}

// SMS request that needs to be sent.
func (r SmsApiSendRequest) SmsSendRequest(smsSendRequest SmsSendRequest) SmsApiSendRequest {
	r.smsSendRequest = &smsSendRequest
	return r
}

func (r SmsApiSendRequest) Execute() (*Sms, *http.Response, error) {
	return r.ApiService.SendExecute(r)
}

/*
Send Send an SMS

Sends an outbound text message.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SmsApiSendRequest
*/
func (a *SmsApiService) Send(ctx context.Context) SmsApiSendRequest {
	return SmsApiSendRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Sms
func (a *SmsApiService) SendExecute(r SmsApiSendRequest) (*Sms, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Sms
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SmsApiService.Send")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sms"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.smsSendRequest == nil {
		return localVarReturnValue, nil, reportError("smsSendRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.smsSendRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
