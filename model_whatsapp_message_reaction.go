/*
YCloud API

The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.

API version: v2
Contact: service@ycloud.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ycloud

import (
	"encoding/json"
)

// WhatsappMessageReaction When a user reacts to messages with an emoji, the message type is set to `reaction`, and this field is included.
type WhatsappMessageReaction struct {
	// Specifies the `wamid` of the message received that contained the reaction.
	MessageId string `json:"message_id"`
	// **Required** when you send a `reaction` message. Set it to `\"\"` if you want to remove the emoji. **Optional** when you received a message from a user. This field is included when a user reacts to messages with an emoji. Otherwise, it indicates a user removed the emoji.
	Emoji *string `json:"emoji,omitempty"`
}

// NewWhatsappMessageReaction instantiates a new WhatsappMessageReaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWhatsappMessageReaction(messageId string) *WhatsappMessageReaction {
	this := WhatsappMessageReaction{}
	this.MessageId = messageId
	return &this
}

// NewWhatsappMessageReactionWithDefaults instantiates a new WhatsappMessageReaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWhatsappMessageReactionWithDefaults() *WhatsappMessageReaction {
	this := WhatsappMessageReaction{}
	return &this
}

// GetMessageId returns the MessageId field value
func (o *WhatsappMessageReaction) GetMessageId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MessageId
}

// GetMessageIdOk returns a tuple with the MessageId field value
// and a boolean to check if the value has been set.
func (o *WhatsappMessageReaction) GetMessageIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MessageId, true
}

// SetMessageId sets field value
func (o *WhatsappMessageReaction) SetMessageId(v string) {
	o.MessageId = v
}

// GetEmoji returns the Emoji field value if set, zero value otherwise.
func (o *WhatsappMessageReaction) GetEmoji() string {
	if o == nil || o.Emoji == nil {
		var ret string
		return ret
	}
	return *o.Emoji
}

// GetEmojiOk returns a tuple with the Emoji field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhatsappMessageReaction) GetEmojiOk() (*string, bool) {
	if o == nil || o.Emoji == nil {
		return nil, false
	}
	return o.Emoji, true
}

// HasEmoji returns a boolean if a field has been set.
func (o *WhatsappMessageReaction) HasEmoji() bool {
	if o != nil && o.Emoji != nil {
		return true
	}

	return false
}

// SetEmoji gets a reference to the given string and assigns it to the Emoji field.
func (o *WhatsappMessageReaction) SetEmoji(v string) {
	o.Emoji = &v
}

func (o WhatsappMessageReaction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["message_id"] = o.MessageId
	}
	if o.Emoji != nil {
		toSerialize["emoji"] = o.Emoji
	}
	return json.Marshal(toSerialize)
}

type NullableWhatsappMessageReaction struct {
	value *WhatsappMessageReaction
	isSet bool
}

func (v NullableWhatsappMessageReaction) Get() *WhatsappMessageReaction {
	return v.value
}

func (v *NullableWhatsappMessageReaction) Set(val *WhatsappMessageReaction) {
	v.value = val
	v.isSet = true
}

func (v NullableWhatsappMessageReaction) IsSet() bool {
	return v.isSet
}

func (v *NullableWhatsappMessageReaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWhatsappMessageReaction(val *WhatsappMessageReaction) *NullableWhatsappMessageReaction {
	return &NullableWhatsappMessageReaction{value: val, isSet: true}
}

func (v NullableWhatsappMessageReaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWhatsappMessageReaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


