/*
YCloud API

The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.

API version: v2
Contact: service@ycloud.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ycloud

import (
	"encoding/json"
	"fmt"
)

// WhatsappMessageStatus WhatsApp message status. One of `accepted`, `failed`, `sent`, `delivered`, `read`. - `accepted`: The messaging request is accepted by our system. - `failed`: A message sent by your business failed to send. - `sent`: A message sent by your business is in transit within WhatsApp's systems. - `delivered`: A message sent by your business was delivered to the user's device. - `read`: A message sent by your business was read by the user.
type WhatsappMessageStatus string

// List of WhatsappMessageStatus
const (
	WHATSAPPMESSAGESTATUS_ACCEPTED WhatsappMessageStatus = "accepted"
	WHATSAPPMESSAGESTATUS_FAILED WhatsappMessageStatus = "failed"
	WHATSAPPMESSAGESTATUS_SENT WhatsappMessageStatus = "sent"
	WHATSAPPMESSAGESTATUS_DELIVERED WhatsappMessageStatus = "delivered"
	WHATSAPPMESSAGESTATUS_READ WhatsappMessageStatus = "read"
)

// All allowed values of WhatsappMessageStatus enum
var AllowedWhatsappMessageStatusEnumValues = []WhatsappMessageStatus{
	"accepted",
	"failed",
	"sent",
	"delivered",
	"read",
}

func (v *WhatsappMessageStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WhatsappMessageStatus(value)
	*v = enumTypeValue
	return nil
}

// NewWhatsappMessageStatusFromValue returns a pointer to a valid WhatsappMessageStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWhatsappMessageStatusFromValue(v string) (*WhatsappMessageStatus, error) {
	ev := WhatsappMessageStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WhatsappMessageStatus: valid values are %v", v, AllowedWhatsappMessageStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WhatsappMessageStatus) IsValid() bool {
	for _, existing := range AllowedWhatsappMessageStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WhatsappMessageStatus value
func (v WhatsappMessageStatus) Ptr() *WhatsappMessageStatus {
	return &v
}

type NullableWhatsappMessageStatus struct {
	value *WhatsappMessageStatus
	isSet bool
}

func (v NullableWhatsappMessageStatus) Get() *WhatsappMessageStatus {
	return v.value
}

func (v *NullableWhatsappMessageStatus) Set(val *WhatsappMessageStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableWhatsappMessageStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableWhatsappMessageStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWhatsappMessageStatus(val *WhatsappMessageStatus) *NullableWhatsappMessageStatus {
	return &NullableWhatsappMessageStatus{value: val, isSet: true}
}

func (v NullableWhatsappMessageStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWhatsappMessageStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

