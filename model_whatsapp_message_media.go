/*
YCloud API

The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.

API version: v2
Contact: service@ycloud.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ycloud

import (
	"encoding/json"
)

// WhatsappMessageMedia [WhatsApp Media Object](https://developers.facebook.com/docs/whatsapp/cloud-api/reference/messages#media-object).
type WhatsappMessageMedia struct {
	// The protocol and URL of the media to be sent. Use only with HTTP/HTTPS URLs.
	Link string `json:"link"`
	// Describes the specified `video` or `image` media.
	Caption *string `json:"caption,omitempty"`
	// Describes the filename for the specific document. Use only with `document` media.
	Filename *string `json:"filename,omitempty"`
}

// NewWhatsappMessageMedia instantiates a new WhatsappMessageMedia object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWhatsappMessageMedia(link string) *WhatsappMessageMedia {
	this := WhatsappMessageMedia{}
	this.Link = link
	return &this
}

// NewWhatsappMessageMediaWithDefaults instantiates a new WhatsappMessageMedia object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWhatsappMessageMediaWithDefaults() *WhatsappMessageMedia {
	this := WhatsappMessageMedia{}
	return &this
}

// GetLink returns the Link field value
func (o *WhatsappMessageMedia) GetLink() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Link
}

// GetLinkOk returns a tuple with the Link field value
// and a boolean to check if the value has been set.
func (o *WhatsappMessageMedia) GetLinkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Link, true
}

// SetLink sets field value
func (o *WhatsappMessageMedia) SetLink(v string) {
	o.Link = v
}

// GetCaption returns the Caption field value if set, zero value otherwise.
func (o *WhatsappMessageMedia) GetCaption() string {
	if o == nil || o.Caption == nil {
		var ret string
		return ret
	}
	return *o.Caption
}

// GetCaptionOk returns a tuple with the Caption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhatsappMessageMedia) GetCaptionOk() (*string, bool) {
	if o == nil || o.Caption == nil {
		return nil, false
	}
	return o.Caption, true
}

// HasCaption returns a boolean if a field has been set.
func (o *WhatsappMessageMedia) HasCaption() bool {
	if o != nil && o.Caption != nil {
		return true
	}

	return false
}

// SetCaption gets a reference to the given string and assigns it to the Caption field.
func (o *WhatsappMessageMedia) SetCaption(v string) {
	o.Caption = &v
}

// GetFilename returns the Filename field value if set, zero value otherwise.
func (o *WhatsappMessageMedia) GetFilename() string {
	if o == nil || o.Filename == nil {
		var ret string
		return ret
	}
	return *o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhatsappMessageMedia) GetFilenameOk() (*string, bool) {
	if o == nil || o.Filename == nil {
		return nil, false
	}
	return o.Filename, true
}

// HasFilename returns a boolean if a field has been set.
func (o *WhatsappMessageMedia) HasFilename() bool {
	if o != nil && o.Filename != nil {
		return true
	}

	return false
}

// SetFilename gets a reference to the given string and assigns it to the Filename field.
func (o *WhatsappMessageMedia) SetFilename(v string) {
	o.Filename = &v
}

func (o WhatsappMessageMedia) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["link"] = o.Link
	}
	if o.Caption != nil {
		toSerialize["caption"] = o.Caption
	}
	if o.Filename != nil {
		toSerialize["filename"] = o.Filename
	}
	return json.Marshal(toSerialize)
}

type NullableWhatsappMessageMedia struct {
	value *WhatsappMessageMedia
	isSet bool
}

func (v NullableWhatsappMessageMedia) Get() *WhatsappMessageMedia {
	return v.value
}

func (v *NullableWhatsappMessageMedia) Set(val *WhatsappMessageMedia) {
	v.value = val
	v.isSet = true
}

func (v NullableWhatsappMessageMedia) IsSet() bool {
	return v.isSet
}

func (v *NullableWhatsappMessageMedia) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWhatsappMessageMedia(val *WhatsappMessageMedia) *NullableWhatsappMessageMedia {
	return &NullableWhatsappMessageMedia{value: val, isSet: true}
}

func (v NullableWhatsappMessageMedia) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWhatsappMessageMedia) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


