/*
YCloud API

The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.

API version: v2
Contact: service@ycloud.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ycloud

import (
	"encoding/json"
)

// WhatsappMessageContactAddress Full contact address(es) formatted as an addresses object.
type WhatsappMessageContactAddress struct {
	// Street number and name.
	Street *string `json:"street,omitempty"`
	// City name.
	City *string `json:"city,omitempty"`
	// State abbreviation.
	State *string `json:"state,omitempty"`
	// ZIP code.
	Zip *string `json:"zip,omitempty"`
	// Full country name.
	Country *string `json:"country,omitempty"`
	// Two-letter country abbreviation.
	CountryCode *string `json:"country_code,omitempty"`
	// Standard values are `HOME` and `WORK`.
	Type *string `json:"type,omitempty"`
}

// NewWhatsappMessageContactAddress instantiates a new WhatsappMessageContactAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWhatsappMessageContactAddress() *WhatsappMessageContactAddress {
	this := WhatsappMessageContactAddress{}
	return &this
}

// NewWhatsappMessageContactAddressWithDefaults instantiates a new WhatsappMessageContactAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWhatsappMessageContactAddressWithDefaults() *WhatsappMessageContactAddress {
	this := WhatsappMessageContactAddress{}
	return &this
}

// GetStreet returns the Street field value if set, zero value otherwise.
func (o *WhatsappMessageContactAddress) GetStreet() string {
	if o == nil || o.Street == nil {
		var ret string
		return ret
	}
	return *o.Street
}

// GetStreetOk returns a tuple with the Street field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhatsappMessageContactAddress) GetStreetOk() (*string, bool) {
	if o == nil || o.Street == nil {
		return nil, false
	}
	return o.Street, true
}

// HasStreet returns a boolean if a field has been set.
func (o *WhatsappMessageContactAddress) HasStreet() bool {
	if o != nil && o.Street != nil {
		return true
	}

	return false
}

// SetStreet gets a reference to the given string and assigns it to the Street field.
func (o *WhatsappMessageContactAddress) SetStreet(v string) {
	o.Street = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *WhatsappMessageContactAddress) GetCity() string {
	if o == nil || o.City == nil {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhatsappMessageContactAddress) GetCityOk() (*string, bool) {
	if o == nil || o.City == nil {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *WhatsappMessageContactAddress) HasCity() bool {
	if o != nil && o.City != nil {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *WhatsappMessageContactAddress) SetCity(v string) {
	o.City = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *WhatsappMessageContactAddress) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhatsappMessageContactAddress) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *WhatsappMessageContactAddress) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *WhatsappMessageContactAddress) SetState(v string) {
	o.State = &v
}

// GetZip returns the Zip field value if set, zero value otherwise.
func (o *WhatsappMessageContactAddress) GetZip() string {
	if o == nil || o.Zip == nil {
		var ret string
		return ret
	}
	return *o.Zip
}

// GetZipOk returns a tuple with the Zip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhatsappMessageContactAddress) GetZipOk() (*string, bool) {
	if o == nil || o.Zip == nil {
		return nil, false
	}
	return o.Zip, true
}

// HasZip returns a boolean if a field has been set.
func (o *WhatsappMessageContactAddress) HasZip() bool {
	if o != nil && o.Zip != nil {
		return true
	}

	return false
}

// SetZip gets a reference to the given string and assigns it to the Zip field.
func (o *WhatsappMessageContactAddress) SetZip(v string) {
	o.Zip = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *WhatsappMessageContactAddress) GetCountry() string {
	if o == nil || o.Country == nil {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhatsappMessageContactAddress) GetCountryOk() (*string, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *WhatsappMessageContactAddress) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *WhatsappMessageContactAddress) SetCountry(v string) {
	o.Country = &v
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *WhatsappMessageContactAddress) GetCountryCode() string {
	if o == nil || o.CountryCode == nil {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhatsappMessageContactAddress) GetCountryCodeOk() (*string, bool) {
	if o == nil || o.CountryCode == nil {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *WhatsappMessageContactAddress) HasCountryCode() bool {
	if o != nil && o.CountryCode != nil {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *WhatsappMessageContactAddress) SetCountryCode(v string) {
	o.CountryCode = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *WhatsappMessageContactAddress) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhatsappMessageContactAddress) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *WhatsappMessageContactAddress) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *WhatsappMessageContactAddress) SetType(v string) {
	o.Type = &v
}

func (o WhatsappMessageContactAddress) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Street != nil {
		toSerialize["street"] = o.Street
	}
	if o.City != nil {
		toSerialize["city"] = o.City
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.Zip != nil {
		toSerialize["zip"] = o.Zip
	}
	if o.Country != nil {
		toSerialize["country"] = o.Country
	}
	if o.CountryCode != nil {
		toSerialize["country_code"] = o.CountryCode
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableWhatsappMessageContactAddress struct {
	value *WhatsappMessageContactAddress
	isSet bool
}

func (v NullableWhatsappMessageContactAddress) Get() *WhatsappMessageContactAddress {
	return v.value
}

func (v *NullableWhatsappMessageContactAddress) Set(val *WhatsappMessageContactAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableWhatsappMessageContactAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableWhatsappMessageContactAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWhatsappMessageContactAddress(val *WhatsappMessageContactAddress) *NullableWhatsappMessageContactAddress {
	return &NullableWhatsappMessageContactAddress{value: val, isSet: true}
}

func (v NullableWhatsappMessageContactAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWhatsappMessageContactAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


