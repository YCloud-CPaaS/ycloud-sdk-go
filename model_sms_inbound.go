/*
YCloud API

The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.

API version: v2
Contact: service@ycloud.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ycloud

import (
	"encoding/json"
	"time"
)

// SmsInbound Represents an inbound SMS message, which means a user replies to your message.
type SmsInbound struct {
	// Unique ID of the message.
	Id *string `json:"id,omitempty"`
	// The user's phone number who sent the message to your registered sender ID, formatted in [E.164](https://en.wikipedia.org/wiki/E.164) format.
	From *string `json:"from,omitempty"`
	// The receiver's phone number, which is one of your registered Sender IDs.
	To *string `json:"to,omitempty"`
	// The text of this message.
	Text *string `json:"text,omitempty"`
	// The time at which this message was sent, formatted in [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339). e.g., `2022-06-01T12:00:00.000Z`.
	SendTime *time.Time `json:"sendTime,omitempty"`
}

// NewSmsInbound instantiates a new SmsInbound object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmsInbound() *SmsInbound {
	this := SmsInbound{}
	return &this
}

// NewSmsInboundWithDefaults instantiates a new SmsInbound object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmsInboundWithDefaults() *SmsInbound {
	this := SmsInbound{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SmsInbound) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsInbound) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SmsInbound) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SmsInbound) SetId(v string) {
	o.Id = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *SmsInbound) GetFrom() string {
	if o == nil || o.From == nil {
		var ret string
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsInbound) GetFromOk() (*string, bool) {
	if o == nil || o.From == nil {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *SmsInbound) HasFrom() bool {
	if o != nil && o.From != nil {
		return true
	}

	return false
}

// SetFrom gets a reference to the given string and assigns it to the From field.
func (o *SmsInbound) SetFrom(v string) {
	o.From = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *SmsInbound) GetTo() string {
	if o == nil || o.To == nil {
		var ret string
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsInbound) GetToOk() (*string, bool) {
	if o == nil || o.To == nil {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *SmsInbound) HasTo() bool {
	if o != nil && o.To != nil {
		return true
	}

	return false
}

// SetTo gets a reference to the given string and assigns it to the To field.
func (o *SmsInbound) SetTo(v string) {
	o.To = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *SmsInbound) GetText() string {
	if o == nil || o.Text == nil {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsInbound) GetTextOk() (*string, bool) {
	if o == nil || o.Text == nil {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *SmsInbound) HasText() bool {
	if o != nil && o.Text != nil {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *SmsInbound) SetText(v string) {
	o.Text = &v
}

// GetSendTime returns the SendTime field value if set, zero value otherwise.
func (o *SmsInbound) GetSendTime() time.Time {
	if o == nil || o.SendTime == nil {
		var ret time.Time
		return ret
	}
	return *o.SendTime
}

// GetSendTimeOk returns a tuple with the SendTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsInbound) GetSendTimeOk() (*time.Time, bool) {
	if o == nil || o.SendTime == nil {
		return nil, false
	}
	return o.SendTime, true
}

// HasSendTime returns a boolean if a field has been set.
func (o *SmsInbound) HasSendTime() bool {
	if o != nil && o.SendTime != nil {
		return true
	}

	return false
}

// SetSendTime gets a reference to the given time.Time and assigns it to the SendTime field.
func (o *SmsInbound) SetSendTime(v time.Time) {
	o.SendTime = &v
}

func (o SmsInbound) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.From != nil {
		toSerialize["from"] = o.From
	}
	if o.To != nil {
		toSerialize["to"] = o.To
	}
	if o.Text != nil {
		toSerialize["text"] = o.Text
	}
	if o.SendTime != nil {
		toSerialize["sendTime"] = o.SendTime
	}
	return json.Marshal(toSerialize)
}

type NullableSmsInbound struct {
	value *SmsInbound
	isSet bool
}

func (v NullableSmsInbound) Get() *SmsInbound {
	return v.value
}

func (v *NullableSmsInbound) Set(val *SmsInbound) {
	v.value = val
	v.isSet = true
}

func (v NullableSmsInbound) IsSet() bool {
	return v.isSet
}

func (v *NullableSmsInbound) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmsInbound(val *SmsInbound) *NullableSmsInbound {
	return &NullableSmsInbound{value: val, isSet: true}
}

func (v NullableSmsInbound) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmsInbound) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


