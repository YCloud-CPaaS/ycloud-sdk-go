/*
YCloud API

The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.

API version: v2
Contact: service@ycloud.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ycloud

import (
	"encoding/json"
	"fmt"
)

// WhatsappMessageType WhatsApp outbound message type. See also [WhatsApp messages](https://developers.facebook.com/docs/whatsapp/cloud-api/reference/messages).
type WhatsappMessageType string

// List of WhatsappMessageType
const (
	WHATSAPPMESSAGETYPE_TEMPLATE WhatsappMessageType = "template"
	WHATSAPPMESSAGETYPE_TEXT WhatsappMessageType = "text"
	WHATSAPPMESSAGETYPE_IMAGE WhatsappMessageType = "image"
	WHATSAPPMESSAGETYPE_AUDIO WhatsappMessageType = "audio"
	WHATSAPPMESSAGETYPE_VIDEO WhatsappMessageType = "video"
	WHATSAPPMESSAGETYPE_DOCUMENT WhatsappMessageType = "document"
	WHATSAPPMESSAGETYPE_STICKER WhatsappMessageType = "sticker"
	WHATSAPPMESSAGETYPE_LOCATION WhatsappMessageType = "location"
	WHATSAPPMESSAGETYPE_INTERACTIVE WhatsappMessageType = "interactive"
	WHATSAPPMESSAGETYPE_CONTACTS WhatsappMessageType = "contacts"
	WHATSAPPMESSAGETYPE_REACTION WhatsappMessageType = "reaction"
)

// All allowed values of WhatsappMessageType enum
var AllowedWhatsappMessageTypeEnumValues = []WhatsappMessageType{
	"template",
	"text",
	"image",
	"audio",
	"video",
	"document",
	"sticker",
	"location",
	"interactive",
	"contacts",
	"reaction",
}

func (v *WhatsappMessageType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WhatsappMessageType(value)
	*v = enumTypeValue
	return nil
}

// NewWhatsappMessageTypeFromValue returns a pointer to a valid WhatsappMessageType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWhatsappMessageTypeFromValue(v string) (*WhatsappMessageType, error) {
	ev := WhatsappMessageType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WhatsappMessageType: valid values are %v", v, AllowedWhatsappMessageTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WhatsappMessageType) IsValid() bool {
	for _, existing := range AllowedWhatsappMessageTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WhatsappMessageType value
func (v WhatsappMessageType) Ptr() *WhatsappMessageType {
	return &v
}

type NullableWhatsappMessageType struct {
	value *WhatsappMessageType
	isSet bool
}

func (v NullableWhatsappMessageType) Get() *WhatsappMessageType {
	return v.value
}

func (v *NullableWhatsappMessageType) Set(val *WhatsappMessageType) {
	v.value = val
	v.isSet = true
}

func (v NullableWhatsappMessageType) IsSet() bool {
	return v.isSet
}

func (v *NullableWhatsappMessageType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWhatsappMessageType(val *WhatsappMessageType) *NullableWhatsappMessageType {
	return &NullableWhatsappMessageType{value: val, isSet: true}
}

func (v NullableWhatsappMessageType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWhatsappMessageType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

